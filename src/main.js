/** @jsx figma.widget.h */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { once, showUI } from '@create-figma-plugin/utilities';
var widget = figma.widget;
var AutoLayout = widget.AutoLayout, Text = widget.Text, useSyncedState = widget.useSyncedState, usePropertyMenu = widget.usePropertyMenu, Rectangle = widget.Rectangle, SVG = widget.SVG;
var logo = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M13.5255 6.96593C13.6631 6.43247 14.1912 6.11588 14.7049 6.25882L20.286 7.81174C20.7997 7.95468 21.1046 8.50302 20.9669 9.03648L18.4745 18.6957C18.3369 19.2292 17.8088 19.5458 17.2951 19.4028L11.714 17.8499C11.2003 17.707 10.8954 17.1587 11.0331 16.6252L13.5255 6.96593Z\" fill=\"#4E5BA6\"/>\n<path d=\"M8 6C8 5.44772 8.44772 5 9 5H15C15.5523 5 16 5.44772 16 6V16C16 16.5523 15.5523 17 15 17H9C8.44772 17 8 16.5523 8 16V6Z\" fill=\"#C8CCE5\"/>\n<path d=\"M3.03432 8.81198C2.89138 8.27852 3.20796 7.73018 3.74143 7.58724L9.53698 6.03432C10.0704 5.89138 10.6188 6.20796 10.7617 6.74143L13.3499 16.4007C13.4929 16.9342 13.1763 17.4825 12.6428 17.6254L6.84726 19.1783C6.31379 19.3213 5.76545 19.0047 5.62251 18.4712L3.03432 8.81198Z\" fill=\"#EAECF5\"/>\n</svg>";
var button = "<svg width=\"288\" height=\"44\" viewBox=\"0 0 288 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"288\" height=\"44\" rx=\"8\" fill=\"#C8CCE5\"/>\n<path d=\"M107.367 18.376C106.461 18.376 105.757 18.7027 105.253 19.356C104.749 20 104.497 20.8867 104.497 22.016C104.497 23.1547 104.73 24.0413 105.197 24.676C105.663 25.3107 106.382 25.628 107.353 25.628C107.773 25.628 108.183 25.586 108.585 25.502C108.995 25.4087 109.415 25.2873 109.845 25.138V26.664C109.434 26.832 109.019 26.9533 108.599 27.028C108.188 27.1027 107.712 27.14 107.171 27.14C106.144 27.14 105.295 26.93 104.623 26.51C103.951 26.0807 103.451 25.4833 103.125 24.718C102.798 23.9433 102.635 23.038 102.635 22.002C102.635 20.994 102.817 20.1073 103.181 19.342C103.545 18.5673 104.077 17.9607 104.777 17.522C105.486 17.0833 106.349 16.864 107.367 16.864C107.871 16.864 108.365 16.92 108.851 17.032C109.345 17.144 109.807 17.3073 110.237 17.522L109.621 18.992C109.266 18.8333 108.897 18.6933 108.515 18.572C108.141 18.4413 107.759 18.376 107.367 18.376ZM115.805 19.272C115.927 19.272 116.062 19.2813 116.211 19.3C116.361 19.3093 116.482 19.3233 116.575 19.342L116.421 20.98C116.328 20.9613 116.211 20.9473 116.071 20.938C115.941 20.9193 115.829 20.91 115.735 20.91C115.362 20.91 115.012 20.9893 114.685 21.148C114.359 21.2973 114.093 21.5307 113.887 21.848C113.691 22.1653 113.593 22.5713 113.593 23.066V27H111.829V19.412H113.187L113.439 20.728H113.523C113.747 20.3267 114.055 19.986 114.447 19.706C114.839 19.4167 115.292 19.272 115.805 19.272ZM120.76 19.272C121.778 19.272 122.58 19.5753 123.168 20.182C123.766 20.7887 124.064 21.6333 124.064 22.716V23.612H119.052C119.071 24.3027 119.262 24.8393 119.626 25.222C119.99 25.5953 120.494 25.782 121.138 25.782C121.624 25.782 122.062 25.7353 122.454 25.642C122.846 25.5393 123.248 25.3947 123.658 25.208V26.622C123.285 26.7993 122.898 26.93 122.496 27.014C122.095 27.098 121.614 27.14 121.054 27.14C120.308 27.14 119.65 27 119.08 26.72C118.511 26.4307 118.063 26.0013 117.736 25.432C117.419 24.8533 117.26 24.13 117.26 23.262C117.26 21.9647 117.578 20.9753 118.212 20.294C118.856 19.6127 119.706 19.272 120.76 19.272ZM120.76 20.574C120.284 20.574 119.897 20.728 119.598 21.036C119.309 21.3347 119.141 21.7827 119.094 22.38H122.356C122.347 21.8573 122.212 21.428 121.95 21.092C121.698 20.7467 121.302 20.574 120.76 20.574ZM128.867 19.272C129.847 19.272 130.589 19.4867 131.093 19.916C131.606 20.3453 131.863 21.008 131.863 21.904V27H130.617L130.267 25.95H130.211C129.884 26.3607 129.539 26.664 129.175 26.86C128.811 27.0467 128.316 27.14 127.691 27.14C127.01 27.14 126.445 26.9487 125.997 26.566C125.549 26.1833 125.325 25.5907 125.325 24.788C125.325 24.004 125.61 23.416 126.179 23.024C126.758 22.632 127.63 22.4127 128.797 22.366L130.113 22.324V21.946C130.113 21.4607 129.996 21.1153 129.763 20.91C129.53 20.7047 129.203 20.602 128.783 20.602C128.4 20.602 128.032 20.658 127.677 20.77C127.332 20.8727 126.986 21.0033 126.641 21.162L126.081 19.93C126.454 19.734 126.879 19.5753 127.355 19.454C127.84 19.3327 128.344 19.272 128.867 19.272ZM130.113 23.416L129.189 23.444C128.414 23.472 127.878 23.6073 127.579 23.85C127.28 24.0833 127.131 24.4007 127.131 24.802C127.131 25.166 127.234 25.4273 127.439 25.586C127.654 25.7353 127.934 25.81 128.279 25.81C128.792 25.81 129.226 25.6653 129.581 25.376C129.936 25.0773 130.113 24.6387 130.113 24.06V23.416ZM137.013 25.726C137.228 25.726 137.438 25.7073 137.643 25.67C137.858 25.6233 138.054 25.572 138.231 25.516V26.832C138.045 26.9253 137.802 27 137.503 27.056C137.205 27.112 136.892 27.14 136.565 27.14C136.127 27.14 135.73 27.07 135.375 26.93C135.03 26.79 134.755 26.5427 134.549 26.188C134.344 25.8333 134.241 25.334 134.241 24.69V20.742H133.219V19.972L134.339 19.356L134.899 17.746H136.005V19.412H138.161V20.742H136.005V24.676C136.005 25.0307 136.099 25.2967 136.285 25.474C136.481 25.642 136.724 25.726 137.013 25.726ZM142.813 19.272C143.83 19.272 144.633 19.5753 145.221 20.182C145.818 20.7887 146.117 21.6333 146.117 22.716V23.612H141.105C141.124 24.3027 141.315 24.8393 141.679 25.222C142.043 25.5953 142.547 25.782 143.191 25.782C143.676 25.782 144.115 25.7353 144.507 25.642C144.899 25.5393 145.3 25.3947 145.711 25.208V26.622C145.338 26.7993 144.95 26.93 144.549 27.014C144.148 27.098 143.667 27.14 143.107 27.14C142.36 27.14 141.702 27 141.133 26.72C140.564 26.4307 140.116 26.0013 139.789 25.432C139.472 24.8533 139.313 24.13 139.313 23.262C139.313 21.9647 139.63 20.9753 140.265 20.294C140.909 19.6127 141.758 19.272 142.813 19.272ZM142.813 20.574C142.337 20.574 141.95 20.728 141.651 21.036C141.362 21.3347 141.194 21.7827 141.147 22.38H144.409C144.4 21.8573 144.264 21.428 144.003 21.092C143.751 20.7467 143.354 20.574 142.813 20.574ZM157.51 24.27C157.51 25.1567 157.188 25.8567 156.544 26.37C155.9 26.8833 155.009 27.14 153.87 27.14C152.769 27.14 151.836 26.9533 151.07 26.58V24.9C151.49 25.0867 151.952 25.2593 152.456 25.418C152.97 25.5673 153.483 25.642 153.996 25.642C154.603 25.642 155.042 25.5253 155.312 25.292C155.592 25.0493 155.732 24.7413 155.732 24.368C155.732 23.9573 155.555 23.6307 155.2 23.388C154.846 23.136 154.328 22.8653 153.646 22.576C153.236 22.408 152.839 22.2027 152.456 21.96C152.083 21.708 151.775 21.3953 151.532 21.022C151.299 20.6393 151.182 20.1633 151.182 19.594C151.182 18.7447 151.481 18.0773 152.078 17.592C152.685 17.1067 153.492 16.864 154.5 16.864C155.023 16.864 155.518 16.92 155.984 17.032C156.46 17.144 156.927 17.3027 157.384 17.508L156.81 18.95C156.39 18.7727 155.989 18.6327 155.606 18.53C155.233 18.4273 154.846 18.376 154.444 18.376C153.959 18.376 153.59 18.4833 153.338 18.698C153.086 18.9127 152.96 19.1973 152.96 19.552C152.96 19.8227 153.03 20.056 153.17 20.252C153.31 20.4387 153.525 20.6113 153.814 20.77C154.113 20.9287 154.496 21.1107 154.962 21.316C155.504 21.5493 155.961 21.7967 156.334 22.058C156.717 22.31 157.006 22.6133 157.202 22.968C157.408 23.3133 157.51 23.7473 157.51 24.27ZM162.17 25.726C162.384 25.726 162.594 25.7073 162.8 25.67C163.014 25.6233 163.21 25.572 163.388 25.516V26.832C163.201 26.9253 162.958 27 162.66 27.056C162.361 27.112 162.048 27.14 161.722 27.14C161.283 27.14 160.886 27.07 160.532 26.93C160.186 26.79 159.911 26.5427 159.706 26.188C159.5 25.8333 159.398 25.334 159.398 24.69V20.742H158.376V19.972L159.496 19.356L160.056 17.746H161.162V19.412H163.318V20.742H161.162V24.676C161.162 25.0307 161.255 25.2967 161.442 25.474C161.638 25.642 161.88 25.726 162.17 25.726ZM171.693 23.192C171.693 24.452 171.367 25.4273 170.713 26.118C170.06 26.7993 169.173 27.14 168.053 27.14C167.363 27.14 166.747 26.986 166.205 26.678C165.664 26.37 165.239 25.922 164.931 25.334C164.623 24.746 164.469 24.032 164.469 23.192C164.469 21.932 164.791 20.966 165.435 20.294C166.089 19.6127 166.975 19.272 168.095 19.272C168.795 19.272 169.416 19.426 169.957 19.734C170.499 20.0327 170.923 20.476 171.231 21.064C171.539 21.6427 171.693 22.352 171.693 23.192ZM166.275 23.192C166.275 23.9947 166.415 24.6153 166.695 25.054C166.985 25.4927 167.447 25.712 168.081 25.712C168.707 25.712 169.164 25.4927 169.453 25.054C169.743 24.6153 169.887 23.9947 169.887 23.192C169.887 22.3893 169.743 21.7733 169.453 21.344C169.164 20.9147 168.702 20.7 168.067 20.7C167.433 20.7 166.975 20.9147 166.695 21.344C166.415 21.7733 166.275 22.3893 166.275 23.192ZM177.493 19.272C177.614 19.272 177.749 19.2813 177.899 19.3C178.048 19.3093 178.169 19.3233 178.263 19.342L178.109 20.98C178.015 20.9613 177.899 20.9473 177.759 20.938C177.628 20.9193 177.516 20.91 177.423 20.91C177.049 20.91 176.699 20.9893 176.373 21.148C176.046 21.2973 175.78 21.5307 175.575 21.848C175.379 22.1653 175.281 22.5713 175.281 23.066V27H173.517V19.412H174.875L175.127 20.728H175.211C175.435 20.3267 175.743 19.986 176.135 19.706C176.527 19.4167 176.979 19.272 177.493 19.272ZM178.535 19.412H180.453L181.965 23.696C182.068 23.9667 182.152 24.2373 182.217 24.508C182.282 24.7693 182.329 25.0307 182.357 25.292H182.413C182.45 25.0493 182.506 24.7927 182.581 24.522C182.656 24.242 182.74 23.9667 182.833 23.696L184.289 19.412H186.193L182.959 28.008C182.67 28.764 182.273 29.3427 181.769 29.744C181.274 30.1547 180.663 30.36 179.935 30.36C179.702 30.36 179.496 30.346 179.319 30.318C179.151 30.2993 179.006 30.276 178.885 30.248V28.848C178.988 28.8667 179.109 28.8853 179.249 28.904C179.398 28.9227 179.552 28.932 179.711 28.932C180.14 28.932 180.486 28.8013 180.747 28.54C181.008 28.288 181.209 27.9707 181.349 27.588L181.573 26.972L178.535 19.412Z\" fill=\"#000E52\"/>\n</svg>";
export default function () {
    widget.register(Notepad);
}
function Notepad() {
    var _a = useSyncedState('userStartedPoll', ''), userStartedPoll = _a[0], setUserStartedPoll = _a[1];
    var _b = useSyncedState('text', 'Hello\nWidgets'), text = _b[0], setText = _b[1];
    var items = [
        {
            itemType: 'action',
            propertyName: 'edit',
            tooltip: 'Edit'
        }
    ];
    function onChange(_a) {
        var propertyName = _a.propertyName;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) {
                            if (propertyName === 'edit') {
                                showUI({ width: 240, height: 144 }, { text: text });
                                once('UPDATE_TEXT', function (text) {
                                    setText(text);
                                    resolve();
                                });
                            }
                        })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    usePropertyMenu(items, onChange);
    return (figma.widget.h(AutoLayout, { direction: "vertical", verticalAlignItems: "center", padding: 16, fill: "#FFFFFF", cornerRadius: 8, spacing: 12, effect: {
            type: 'drop-shadow',
            color: { r: 0, g: 0, b: 0, a: 0.2 },
            offset: { x: 0, y: 2 },
            blur: 2,
            spread: 2
        } },
        figma.widget.h(SVG, { src: logo, onClick: function () {
                //setCount(count + 1)
            } }),
        figma.widget.h(AutoLayout, { direction: 'vertical', horizontalAlignItems: 'start', verticalAlignItems: 'start' }, text.split('\n').map(function (line) {
            return line ? (figma.widget.h(Text, { fontSize: 12, horizontalAlignText: 'left', width: 'fill-parent' }, line)) : null;
        })),
        figma.widget.h(SVG, { src: button, onClick: function () {
                //setCount(count + 1)
            } }),
        figma.widget.h(AutoLayout, { fill: "#C8CCE5", cornerRadius: 4, padding: { left: 16, right: 16, top: 8, bottom: 8 }, onClick: function () {
                var user = figma.activeUsers[0].photoUrl;
                console.log(user);
                showUI({ width: 240, height: 144 }, { user: user });
                return new Promise(function () { });
            } },
            figma.widget.h(Text, { fontSize: 12, fontWeight: "semi-bold", horizontalAlignText: 'center', width: 'fill-parent', fill: "#363F72" }, "Vote"))));
}
