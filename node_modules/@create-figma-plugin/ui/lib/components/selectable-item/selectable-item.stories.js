import { h } from "preact";
import { useState } from "preact/hooks";
import { SelectableItem } from "./selectable-item.js";
export default {
    parameters: {
        fixedWidth: true
    },
    title: "Components/Selectable Item"
};
export const Unselected = function () {
    const [value, setValue] = useState(false);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(SelectableItem, { onChange: handleChange, value: value }, "Text"));
};
export const Selected = function () {
    const [value, setValue] = useState(true);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(SelectableItem, { onChange: handleChange, value: value }, "Text"));
};
export const Disabled = function () {
    function handleChange() {
        throw new Error("This function should not be called");
    }
    return (h(SelectableItem, { disabled: true, onChange: handleChange, value: true }, "Text"));
};
export const Bold = function () {
    const [value, setValue] = useState(true);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(SelectableItem, { bold: true, onChange: handleChange, value: value }, "Text"));
};
export const Indent = function () {
    const [value, setValue] = useState(true);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(SelectableItem, { indent: true, onChange: handleChange, value: value }, "Text"));
};
export const LongText = function () {
    const longText = Array(100).fill("Text").join(" ");
    const [value, setValue] = useState(true);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(SelectableItem, { onChange: handleChange, value: value }, longText));
};
export const OnValueChange = function () {
    const [value, setValue] = useState(false);
    return (h(SelectableItem, { onValueChange: setValue, value: value }, "Text"));
};
//# sourceMappingURL=selectable-item.stories.js.map