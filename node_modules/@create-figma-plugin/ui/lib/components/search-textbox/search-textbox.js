import { h } from "preact";
import { useCallback, useRef } from "preact/hooks";
import { createClassName } from "../../utilities/create-class-name.js";
import { getCurrentFromRef } from "../../utilities/get-current-from-ref.js";
import { IconCross32 } from "../icon/icon-32/icon-cross-32.js";
import { IconSearch32 } from "../icon/icon-32/icon-search-32.js";
import styles from "./search-textbox.css";
const EMPTY_STRING = "";
export function SearchTextbox({ clearOnEscapeKeyDown = false, disabled = false, name, onInput = function () { }, onValueInput = function () { }, placeholder, propagateEscapeKeyDown = true, spellCheck = false, value, ...rest }) {
    const inputElementRef = useRef(null);
    const handleClearButtonClick = useCallback(function () {
        const inputElement = getCurrentFromRef(inputElementRef);
        inputElement.value = EMPTY_STRING;
        const inputEvent = document.createEvent("Event");
        inputEvent.initEvent("input", true, true);
        inputElement.dispatchEvent(inputEvent);
        inputElement.focus();
    }, []);
    const handleFocus = useCallback(function (event) {
        event.currentTarget.select();
    }, []);
    const handleInput = useCallback(function (event) {
        onValueInput(event.currentTarget.value, name);
        onInput(event);
    }, [name, onInput, onValueInput]);
    const handleKeyDown = useCallback(function (event) {
        if (event.key !== "Escape") {
            return;
        }
        if (clearOnEscapeKeyDown === true &&
            value !== EMPTY_STRING &&
            value !== null) {
            event.stopPropagation();
            handleClearButtonClick();
            return;
        }
        if (propagateEscapeKeyDown === false) {
            event.stopPropagation();
        }
        event.currentTarget.blur();
    }, [
        clearOnEscapeKeyDown,
        handleClearButtonClick,
        propagateEscapeKeyDown,
        value
    ]);
    return (h("div", { class: createClassName([
            styles.searchTextbox,
            disabled === true ? styles.disabled : null
        ]) }, h("input", { ...rest, ref: inputElementRef, class: styles.input, disabled: disabled === true, name: name, onFocus: handleFocus, onInput: handleInput, onKeyDown: handleKeyDown, placeholder: placeholder, spellcheck: spellCheck, tabIndex: 0, type: "text", value: value === null ? EMPTY_STRING : value }), h("div", { class: styles.searchIcon }, h(IconSearch32, null)), value === null || value === EMPTY_STRING || disabled === true ? null : (h("button", { class: styles.clearButton, onClick: handleClearButtonClick, tabIndex: 0 }, h(IconCross32, null)))));
}
//# sourceMappingURL=search-textbox.js.map