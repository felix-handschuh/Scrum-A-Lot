import { h } from "preact";
import { useCallback } from "preact/hooks";
import { createClassName } from "../../utilities/create-class-name.js";
import { LoadingIndicator } from "../loading-indicator/loading-indicator.js";
import styles from "./button.css";
export function Button({ children, destructive = false, disabled = false, fullWidth = false, loading = false, onClick, propagateEscapeKeyDown = true, secondary = false, ...rest }) {
    const handleKeyDown = useCallback(function (event) {
        if (event.key === "Escape") {
            if (propagateEscapeKeyDown === false) {
                event.stopPropagation();
            }
            event.currentTarget.blur();
            return;
        }
        if (event.key === "Enter") {
            event.stopPropagation();
        }
    }, [propagateEscapeKeyDown]);
    return (h("div", { class: createClassName([
            styles.button,
            secondary === true ? styles.secondary : styles.primary,
            destructive === true ? styles.destructive : null,
            fullWidth === true ? styles.fullWidth : null,
            disabled === true ? styles.disabled : null,
            loading === true ? styles.loading : null
        ]) }, loading === true ? (h("div", { class: styles.loadingIndicator }, h(LoadingIndicator, null))) : null, h("button", { ...rest, disabled: disabled === true, onClick: disabled === true || loading === true ? undefined : onClick, onKeyDown: disabled === true || loading === true ? undefined : handleKeyDown, tabIndex: disabled === true ? -1 : 0 }, children)));
}
//# sourceMappingURL=button.js.map