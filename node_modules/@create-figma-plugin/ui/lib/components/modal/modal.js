import { Fragment, h, render } from "preact";
import { useEffect, useRef } from "preact/hooks";
import { createClassName } from "../../utilities/create-class-name.js";
import { createFocusTrapKeyDownHandler } from "../../utilities/private/create-focus-trap-key-down-handler.js";
import { getFocusableElements } from "../../utilities/private/get-focusable-elements.js";
import { IconCross32 } from "../icon/icon-32/icon-cross-32.js";
import { Text } from "../text/text.js";
import styles from "./modal.css";
export function Modal({ children, closeButtonIcon = h(IconCross32, null), closeButtonPosition = "right", isOpen, onCloseButtonClick, onEscapeKeyDown, onOverlayClick, position = "center", title, ...rest }) {
    const rootElementRef = useRef(null);
    const previousFocusedElementRef = useRef(null);
    useEffect(function () {
        const rootElement = document.createElement("div");
        document.body.appendChild(rootElement);
        rootElementRef.current = rootElement;
        return function () {
            document.body.removeChild(rootElement);
        };
    }, []);
    useEffect(function () {
        if (rootElementRef.current === null) {
            throw new Error("`rootElementRef.current` is `null`");
        }
        render(h(Fragment, null, h("div", { ...rest, class: createClassName([
                styles.modal,
                isOpen === true ? styles.isOpen : null,
                styles[position]
            ]) }, children, typeof onCloseButtonClick === "undefined" &&
            typeof title === "undefined" ? null : (h("div", { class: styles.topBar }, h("div", { class: styles.title }, typeof title === "undefined" ? null : (h(Text, { bold: true }, title))), typeof onCloseButtonClick === "undefined" ? null : (h("button", { class: createClassName([
                styles.closeButton,
                closeButtonPosition === "left"
                    ? styles.closeButtonLeft
                    : null
            ]), onClick: onCloseButtonClick, tabIndex: 1 }, h("div", { class: styles.closeButtonBorder }), closeButtonIcon))))), h("div", { class: styles.overlay, onClick: typeof onOverlayClick === "undefined" ? undefined : onOverlayClick })), rootElementRef.current);
        function handleEscapeKeyDown(event) {
            if (event.key !== "Escape" || typeof onEscapeKeyDown === "undefined") {
                return;
            }
            onEscapeKeyDown(event);
        }
        const handleTabKeyDown = createFocusTrapKeyDownHandler(rootElementRef.current);
        if (isOpen === true) {
            window.addEventListener("keydown", handleEscapeKeyDown);
            window.addEventListener("keydown", handleTabKeyDown);
            previousFocusedElementRef.current =
                document.activeElement;
            const focusableElements = getFocusableElements(rootElementRef.current);
            if (focusableElements.length > 0) {
                focusableElements[0].focus();
            }
            else {
                previousFocusedElementRef.current.blur();
            }
        }
        return function () {
            if (isOpen === true) {
                window.removeEventListener("keydown", handleEscapeKeyDown);
                window.removeEventListener("keydown", handleTabKeyDown);
                if (previousFocusedElementRef.current !== null) {
                    previousFocusedElementRef.current.focus();
                }
            }
        };
    }, [
        children,
        closeButtonIcon,
        closeButtonPosition,
        isOpen,
        onCloseButtonClick,
        onEscapeKeyDown,
        onOverlayClick,
        position,
        rest,
        title
    ]);
    return null;
}
//# sourceMappingURL=modal.js.map