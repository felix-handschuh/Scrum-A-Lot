import { h } from "preact";
import { useState } from "preact/hooks";
import { useInitialFocus } from "../../hooks/use-initial-focus/use-initial-focus.js";
import { IconEllipsis32 } from "../icon/icon-32/icon-ellipsis-32.js";
import { IconButton } from "./icon-button.js";
export default { title: "Components/Icon Button" };
export const Unselected = function () {
    const [value, setValue] = useState(false);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(IconButton, { onChange: handleChange, value: value }, h(IconEllipsis32, null)));
};
export const Focused = function () {
    const [value, setValue] = useState(false);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(IconButton, { ...useInitialFocus(), onChange: handleChange, value: value }, h(IconEllipsis32, null)));
};
export const Selected = function () {
    const [value, setValue] = useState(true);
    function handleChange(event) {
        const newValue = event.currentTarget.checked;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(IconButton, { onChange: handleChange, value: value }, h(IconEllipsis32, null)));
};
export const Disabled = function () {
    function handleChange() {
        throw new Error("This function should not be called");
    }
    return (h(IconButton, { disabled: true, onChange: handleChange, value: false }, h(IconEllipsis32, null)));
};
export const OnValueChange = function () {
    const [value, setValue] = useState(true);
    return (h(IconButton, { onValueChange: setValue, value: value }, h(IconEllipsis32, null)));
};
//# sourceMappingURL=icon-button.stories.js.map