import { h } from "preact";
import { useState } from "preact/hooks";
import { useInitialFocus } from "../../hooks/use-initial-focus/use-initial-focus.js";
import { IconLayerFrame16 } from "../icon/icon-16/icon-layer-frame-16.js";
import { Dropdown } from "./dropdown.js";
export default {
    parameters: {
        fixedWidth: true
    },
    title: "Components/Dropdown"
};
export const Empty = function () {
    const [value, setValue] = useState(null);
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return h(Dropdown, { onChange: handleChange, options: options, value: value });
};
export const Focused = function () {
    const [value, setValue] = useState("foo");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(Dropdown, { ...useInitialFocus(), onChange: handleChange, options: options, value: value }));
};
export const Placeholder = function () {
    const [value, setValue] = useState(null);
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(Dropdown, { onChange: handleChange, options: options, placeholder: "Placeholder", value: value }));
};
export const Filled = function () {
    const [value, setValue] = useState("foo");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return h(Dropdown, { onChange: handleChange, options: options, value: value });
};
export const Disabled = function () {
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange() {
        throw new Error("This function should not be called");
    }
    return (h(Dropdown, { disabled: true, onChange: handleChange, options: options, value: "foo" }));
};
export const DisabledOption = function () {
    const [value, setValue] = useState("Mixed");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { disabled: true, value: "Mixed" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return h(Dropdown, { onChange: handleChange, options: options, value: value });
};
export const NoBorder = function () {
    const [value, setValue] = useState("bar");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(Dropdown, { noBorder: true, onChange: handleChange, options: options, value: value }));
};
export const Icon = function () {
    const [value, setValue] = useState("foo");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(Dropdown, { icon: h(IconLayerFrame16, null), onChange: handleChange, options: options, value: value }));
};
export const TextIcon = function () {
    const [value, setValue] = useState("foo");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return (h(Dropdown, { icon: "X", onChange: handleChange, options: options, value: value }));
};
export const Children = function () {
    const [value, setValue] = useState("foo");
    const options = [
        {
            children: "A",
            value: "foo"
        },
        { children: "B", value: "bar" },
        { children: "C", value: "baz" },
        { separator: true },
        { header: "Header" },
        { children: "D", value: "qux" }
    ];
    function handleChange(event) {
        const newValue = event.currentTarget.value;
        console.log(newValue);
        setValue(newValue);
    }
    return h(Dropdown, { onChange: handleChange, options: options, value: value });
};
export const OnValueChange = function () {
    const [value, setValue] = useState("foo");
    const options = [
        { value: "foo" },
        { value: "bar" },
        { value: "baz" },
        { separator: true },
        { header: "Header" },
        { value: "qux" }
    ];
    return h(Dropdown, { onValueChange: setValue, options: options, value: value });
};
//# sourceMappingURL=dropdown.stories.js.map