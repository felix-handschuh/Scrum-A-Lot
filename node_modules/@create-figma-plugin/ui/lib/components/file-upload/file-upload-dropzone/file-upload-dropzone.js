import { h } from "preact";
import { useCallback, useState } from "preact/hooks";
import { createClassName } from "../../../utilities/create-class-name.js";
import { fileComparator } from "../private/file-comparator.js";
import styles from "./file-upload-dropzone.css";
export function FileUploadDropzone({ acceptedFileTypes, children, multiple = false, onSelectedFiles, propagateEscapeKeyDown = true, ...rest }) {
    const [isDropActive, setIsDropActive] = useState(false);
    const filterFiles = useCallback(function (files) {
        const result = Array.prototype.slice.call(files).sort(fileComparator);
        if (typeof acceptedFileTypes === "undefined") {
            return result;
        }
        return result.filter(function (file) {
            return acceptedFileTypes.indexOf(file.type) !== -1;
        });
    }, [acceptedFileTypes]);
    const handleBlur = useCallback(function () {
        setIsDropActive(false);
    }, []);
    const handleChange = useCallback(function (event) {
        if (typeof onSelectedFiles === "undefined") {
            return;
        }
        const files = event.currentTarget.files;
        onSelectedFiles(filterFiles(files));
    }, [filterFiles, onSelectedFiles]);
    const handleDragEnter = useCallback(function (event) {
        event.preventDefault();
    }, []);
    const handleDragOver = useCallback(function (event) {
        event.preventDefault();
        setIsDropActive(true);
    }, []);
    const handleDragEnd = useCallback(function (event) {
        event.preventDefault();
        setIsDropActive(false);
    }, []);
    const handleDrop = useCallback(function (event) {
        if (typeof onSelectedFiles === "undefined") {
            return;
        }
        event.preventDefault();
        if (event.dataTransfer === null) {
            throw new Error("`event.dataTransfer` is `null`");
        }
        const files = filterFiles(event.dataTransfer.files);
        onSelectedFiles(files);
        setIsDropActive(false);
    }, [filterFiles, onSelectedFiles]);
    const handleKeyDown = useCallback(function (event) {
        if (event.key !== "Escape") {
            return;
        }
        if (propagateEscapeKeyDown === false) {
            event.stopPropagation();
        }
        event.currentTarget.blur();
    }, [propagateEscapeKeyDown]);
    return (h("div", { class: createClassName([
            styles.fileUploadDropzone,
            isDropActive === true ? styles.isDropActive : null
        ]) }, h("input", { ...rest, accept: typeof acceptedFileTypes === "undefined"
            ? undefined
            : acceptedFileTypes.join(","), class: styles.input, multiple: multiple, onBlur: handleBlur, onChange: handleChange, onDragEnd: handleDragEnd, onDragEnter: handleDragEnter, onDragOver: handleDragOver, onDrop: handleDrop, onKeyDown: handleKeyDown, tabIndex: 0, title: "", type: "file" }), h("div", { class: styles.dashedLine }), h("div", { class: styles.children }, children)));
}
//# sourceMappingURL=file-upload-dropzone.js.map