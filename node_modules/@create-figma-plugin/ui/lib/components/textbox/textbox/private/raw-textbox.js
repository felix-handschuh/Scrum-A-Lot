import { MIXED_STRING } from "@create-figma-plugin/utilities";
import { h } from "preact";
import { useCallback, useRef, useState } from "preact/hooks";
import { getCurrentFromRef } from "../../../../utilities/get-current-from-ref.js";
import { isKeyCodeCharacterGenerating } from "../../private/is-keycode-character-generating.js";
const EMPTY_STRING = "";
export function RawTextbox({ disabled = false, name, onInput = function () { }, onValueInput = function () { }, password = false, placeholder, propagateEscapeKeyDown = true, revertOnEscapeKeyDown = false, spellCheck = false, validateOnBlur, value, ...rest }) {
    const inputElementRef = useRef(null);
    const isRevertOnEscapeKeyDownRef = useRef(false);
    const [originalValue, setOriginalValue] = useState(EMPTY_STRING);
    const setInputElementValue = useCallback(function (value) {
        const inputElement = getCurrentFromRef(inputElementRef);
        inputElement.value = value;
        const inputEvent = document.createEvent("Event");
        inputEvent.initEvent("input", true, true);
        inputElement.dispatchEvent(inputEvent);
    }, []);
    const handleBlur = useCallback(function () {
        if (isRevertOnEscapeKeyDownRef.current === true) {
            isRevertOnEscapeKeyDownRef.current = false;
            return;
        }
        if (typeof validateOnBlur !== "undefined") {
            const result = validateOnBlur(value);
            if (typeof result === "string") {
                setInputElementValue(result);
                setOriginalValue(EMPTY_STRING);
                return;
            }
            if (result === false) {
                if (value !== originalValue) {
                    setInputElementValue(originalValue);
                }
                setOriginalValue(EMPTY_STRING);
                return;
            }
        }
        setOriginalValue(EMPTY_STRING);
    }, [originalValue, setInputElementValue, validateOnBlur, value]);
    const handleFocus = useCallback(function (event) {
        setOriginalValue(value);
        event.currentTarget.select();
    }, [value]);
    const handleInput = useCallback(function (event) {
        onValueInput(event.currentTarget.value, name);
        onInput(event);
    }, [name, onInput, onValueInput]);
    const handleKeyDown = useCallback(function (event) {
        const key = event.key;
        if (key === "Escape") {
            if (propagateEscapeKeyDown === false) {
                event.stopPropagation();
            }
            if (revertOnEscapeKeyDown === true) {
                isRevertOnEscapeKeyDownRef.current = true;
                setInputElementValue(originalValue);
                setOriginalValue(EMPTY_STRING);
            }
            event.currentTarget.blur();
            return;
        }
        if (key === "Enter") {
            event.currentTarget.blur();
            return;
        }
        if (value === MIXED_STRING &&
            isKeyCodeCharacterGenerating(event.keyCode) === false) {
            event.preventDefault();
            event.currentTarget.select();
        }
    }, [
        originalValue,
        propagateEscapeKeyDown,
        revertOnEscapeKeyDown,
        setInputElementValue,
        value
    ]);
    const handleMouseUp = useCallback(function (event) {
        if (value === MIXED_STRING) {
            event.preventDefault();
        }
    }, [value]);
    return (h("input", { ...rest, ref: inputElementRef, disabled: disabled === true, name: name, onBlur: handleBlur, onFocus: handleFocus, onInput: handleInput, onKeyDown: handleKeyDown, onMouseUp: handleMouseUp, placeholder: placeholder, spellcheck: spellCheck, tabIndex: disabled === true ? -1 : 0, type: password === true ? "password" : "text", value: value === MIXED_STRING ? "Mixed" : value }));
}
//# sourceMappingURL=raw-textbox.js.map